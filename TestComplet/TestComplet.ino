#include <Arduino_LSM6DS3.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include <Math.h>

//ECRAN
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 128 // OLED display height, in pixels
#define OLED_RESET -1     // can set an oled reset pin if desired
Adafruit_SH1107 display = Adafruit_SH1107(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET, 1000000, 100000);

//INCLINAISON
float pitchOld, rollOld;

//MOOD
#define seuilGyroMechant 350
#define seuilAccMechant 1.2
#define seuilGyroDodo 1
#define seuilAccDodo 0.05
int timer;

//BITMAP MOOD
#define IMAGE_WIDTH 60
#define IMAGE_HEIGHT 60
const unsigned char normalEye [] PROGMEM = {
	0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7e, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
	0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
	0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x18, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xc0, 
	0x38, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xe0, 0x30, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x60, 
	0x30, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x60, 0x70, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x70, 
	0x60, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x30, 0x60, 0x00, 0x3f, 0xff, 0xbf, 0xc0, 0x00, 0x30, 
	0x60, 0x00, 0x3f, 0xff, 0xcf, 0xc0, 0x00, 0x30, 0xe0, 0x00, 0x7f, 0xff, 0xcf, 0xe0, 0x00, 0x30, 
	0xc0, 0x00, 0x7f, 0xff, 0xfd, 0xe0, 0x00, 0x10, 0xc0, 0x00, 0xff, 0xff, 0xfb, 0xf0, 0x00, 0x10, 
	0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 
	0xc0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x10, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x10, 
	0xc0, 0x01, 0xe1, 0xff, 0xff, 0xf8, 0x00, 0x10, 0xc0, 0x01, 0xe1, 0xff, 0xff, 0xf8, 0x00, 0x10, 
	0xc0, 0x00, 0xe1, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0xe1, 0xff, 0xff, 0xf0, 0x00, 0x10, 
	0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0x7f, 0x0f, 0xff, 0xe0, 0x00, 0x10, 
	0xc0, 0x00, 0x7f, 0x0f, 0xff, 0xe0, 0x00, 0x10, 0xe0, 0x00, 0x3f, 0x0f, 0xff, 0xc0, 0x00, 0x30, 
	0x60, 0x00, 0x3f, 0x0f, 0xff, 0xc0, 0x00, 0x30, 0x60, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x30, 
	0x60, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x30, 0x70, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x70, 
	0x30, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x60, 
	0x38, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 
	0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
	0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7e, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00
};

const unsigned char mechantEye [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 
	0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 
	0x07, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
	0x03, 0x83, 0xff, 0xff, 0xff, 0xff, 0x0e, 0x00, 0x07, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x07, 0x00, 
	0x06, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x03, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x18, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xc0, 
	0x38, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xe0, 0x30, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x60, 
	0x30, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x60, 0x70, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x70, 
	0x60, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x30, 0x60, 0x00, 0x3e, 0x0f, 0xff, 0xc0, 0x00, 0x30, 
	0x60, 0x00, 0x3e, 0x0f, 0xff, 0xc0, 0x00, 0x30, 0xe0, 0x00, 0x7e, 0x0f, 0xff, 0xe0, 0x00, 0x30, 
	0xc0, 0x00, 0x7e, 0x0f, 0xff, 0xe0, 0x00, 0x10, 0xc0, 0x00, 0xfe, 0x0f, 0xff, 0xf0, 0x00, 0x10, 
	0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 
	0xc0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x10, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x10, 
	0xc0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x10, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x10, 
	0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0xff, 0xff, 0xfd, 0xf0, 0x00, 0x10, 
	0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x10, 
	0xc0, 0x00, 0x7f, 0xff, 0xf7, 0xe0, 0x00, 0x10, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x30, 
	0x60, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x30, 0x60, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x30, 
	0x60, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x30, 0x70, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x70, 
	0x30, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x60, 
	0x38, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x07, 0x00, 
	0x03, 0x80, 0x7f, 0xff, 0xff, 0xfe, 0x0e, 0x00, 0x01, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
	0x01, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 
	0x3f, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0
};

const unsigned char dodo [] PROGMEM = {
	0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7e, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
	0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
	0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 
	0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
	0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xef, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 
	0xc7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xc1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 
	0xc0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0x90, 0xc0, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0xfe, 0x10, 
	0xc0, 0x03, 0xff, 0x80, 0x00, 0x1f, 0xf8, 0x10, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x10, 
	0xc0, 0x01, 0xc7, 0xff, 0xff, 0xff, 0x00, 0x10, 0xc0, 0x01, 0xc6, 0xff, 0xff, 0xf8, 0x00, 0x10, 
	0xc0, 0x00, 0xc7, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x10, 
	0xc0, 0x00, 0xf7, 0xff, 0xff, 0xf0, 0x00, 0x10, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x10, 
	0xc0, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x10, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x30, 
	0x60, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x30, 0x60, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x30, 
	0x60, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x30, 0x70, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x70, 
	0x30, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x60, 
	0x38, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 
	0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
	0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x7e, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00
};

const unsigned char* eyes[3] = {
	normalEye,
	mechantEye,
  dodo
};

void welcomeGoogly()//Affiche un message de bienvenue à l'écran
{
  display.clearDisplay();
  display.setTextSize(3);      // Normal 1:1 pixel scale
  display.setTextColor(SH110X_WHITE); // Draw white text
  display.setCursor(10, 55);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  display.write("GOOGLY");
  display.display();
  delay(2000);
}

void afficheBitmap(int X_, int Y_, int mood)//Affiche une image bitmap à la position choisie et avec le mood selectionné entre 0 et 2
{
  display.clearDisplay();
  display.drawBitmap(X_, Y_, eyes[mood], IMAGE_WIDTH, IMAGE_HEIGHT, 1);
  display.display();
}

int selectMood(float xGy, float yGy, float zGy, float xAcc, float yAcc, float zAcc)//Renvoie 0, 1 ou 2 en fonction des valeurs des gyroscope et accelerometres
{
    if(abs(xGy)>seuilGyroMechant || abs(yGy)>seuilGyroMechant || abs(zGy)>seuilGyroMechant || abs(xAcc)>seuilAccMechant || abs(yAcc)>seuilAccMechant || abs(zAcc)>seuilAccMechant)
    {
      return(1);
    }
    if(abs(xAcc)>seuilAccDodo || abs(yAcc)>seuilAccDodo || abs(xGy)>seuilGyroDodo || abs(yGy)>seuilGyroDodo || abs(zGy)>seuilGyroDodo)
    {
      timer=millis();
    }
    if(millis()-timer>5000)
    {
      return(2);
    }
    return(0);
}

void setup()
{

  Serial.begin(9600);
  while (!Serial);
  if(!IMU.begin())  {
    Serial.println("Failed to initialize IMU!");
    while (1);
  }
  Serial.println("Setup complete!");

  delay(250); // wait for the OLED to power up
  display.begin(0x3C, true); // Address 0x3D default
  welcomeGoogly();
  display.clearDisplay();
}

void loop()
{
  float xGy, yGy, zGy;//Gyroscope en dps sur chacun des axes
  float xAcc, yAcc, zAcc;//Acceleration en g/s sur chacun des axes
  float roll, pitch;//Angle en degrés par rapport au plat
  int X = 34;//Position de l'image sur l'axe des X, 34 au repos
  int Y = 34;//Position de l'image sur l'axe des Y, 34 au repos
  if(IMU.accelerationAvailable() && IMU.gyroscopeAvailable()){
    IMU.readAcceleration(xAcc, yAcc, zAcc);
    IMU.readGyroscope(xGy, yGy, zGy);
    pitch = atan(xAcc/zAcc)*180/3.1415;//Ajouter ou enlever des - devant en fonction de l'orientation de la carte par rapport à celle des ecrans
    roll = -atan(yAcc/zAcc)*180/3.1415;

    ///////////////////////////////////////PITCH X////////////////////////////////////////////////
    if(pitch>pitchOld  && (X+pitch)<128-IMAGE_WIDTH || pitch<pitchOld && (X+pitch)>0)
    {
      X+=pitch;
      pitchOld=pitch;
    }
    else
    {
      X+=pitchOld;
    }

    ////////////////////////////////ROLL Y//////////////////////////////////////////////
    if(roll>rollOld && (Y+roll)<128-IMAGE_HEIGHT || roll<rollOld && (Y+roll)>0)
    {
      Y+=roll;
      rollOld=roll;
    }
    else
    {
      Y+=rollOld;
    }

    afficheBitmap(X, Y, selectMood(xGy, yGy, zGy, xAcc, yAcc, zAcc));
    Serial.println("PITCH : " + String(pitch) + "    ROLL : " + String(roll) + "    PosX : " + String(X) + "    PosY : " + String(Y) + "    Millis : " + String(millis())+ "    Timer : " + String(timer));
  }
}